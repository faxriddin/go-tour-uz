Ko'p turlilar:  tuzilma(struct)lar, qirqim(slice)lar va xarita(map) lar.
Qanday qilib mavjud bo'lgan bir tur asosida boshqa turlarni aniqlashni o'rgatadi.  Bu mashg'ulot struct - tuzilma, array - massiv, slice - qirqim va map -xaritani o'z ichiga oladi.

Go mualliflari
http://golang.org

* Ko'rsatkichlar

Go ko'rsatkichlarga ega.
Ko'rsatkichlar qiymat sifatida xotira manzilini saqlaydi.

`*T` tur `T` qiymat uchun ko'rsatkich. Uning nol qiymati `nil`.

	var p *int

`&` operatori uning operandidan ko'rsatkich generatsiya qiladi.

	i := 42
	p = &i

`*` operatori ko'rsatkichning qiymatiga murojaat qiladi.

	fmt.Println(*p) // i ni p ko'rsatkich orqali o'qish
	*p = 21         // i ni qiymatlash p ko'rsatkich orqali

Bu "bir marta nomlash" yoki "yo'naltirish"  kabi mashhur.

C dan farqli ravishda, Go ko'rsatkichlar ustida arithmetic amallar bajara olmaydi.

.play moretypes/pointers.go

* Tuzilmalar

`struct` bu maydonlar kolleksiyasi.

(Va e'lon qilingan `tur`  siz kutgan ishni bajaradi.)

.play moretypes/structs.go

* Tuzilma maydonlari

Tuzilma maydonlariga murojaat nuqta orqali bajariladi.

.play moretypes/struct-fields.go

* Tuzilmalarga ko'rsatkichlar

Tuzilmalar maydonlariga murojaat tuzilma ko'rsatkichi orqali amalga oshirilishi mumkin.

Mantiqiy manzillarni fizik manzillarga ko'rsatkichlar orqali o'tkazish shaffof.

.play moretypes/struct-pointers.go

* Literalli tuzilmalar

Literalli tuzilmalar o'zining maydonlarini qiymatlarida tuzilmalar yotishini anglatadi.

Siz qism to'plamlar maydonlarini `Name:` ni qo'llab hisoblab chiqishingiz mumkin. (Va nomlarning tartibi ahamiyat kasb etmaydi.)

Maxsus `&` old qo'shimcha belgi tuzilma qiymatiga ko'rsatkichni qaytaradi.

.play moretypes/struct-literals.go

* Massivlar

`[n]T` tur bu turi `T` bo'lgan `n` ta qiymatli massiv.

Quyidagi ifoda

	var a [10]int

`a` o'zgaruvchini 10 ta integer turidagi massivni e'lon qiladi.

Massivning uzunligi uning turining qismi hisoblanadi shu sababli massiv qayta o'zgartirilmaydi.
Bu chegaralashdek ko'rinadi, ammo xavotirga o'rin yo'q;
Go massivlar bilan ishlashga mos keladigan yo'lni yetkazib beradi.

.play moretypes/array.go

* Qirqimlar

Qirqim massiv qiymatlariga ko'rsatadi va shuningdek uzunligini ham qo'shadi.

`[]T` bu elementlari `T` turdagi qirqim.

.play moretypes/slices.go

* Qirqimlarni qirqish

Qirqimlar yana qirqilgan bo'lishi mumkin. Ushbu qirqim qiymati yana ham ana shu massivga ko'rsatuvchi yangi qirqimni yaratgan bo'ladi.

Quyidagi ifoda

	s[lo:hi]

`lo` dan boshhlab `hi-1` gacha bo'lgan elementlarni qirqib beradi. Bu esa

	s[lo:lo]

bo'sh va bu 

	s[lo:lo+1]

bitta element.

.play moretypes/slicing-slices.go

* Qirqimlarni yaratish

Qirqimlar `make` funksiyasi bilan yaratiladi.  U yangi nol qiymatli massiv yaratib so'ngra unga murojaat qiluvchi qirqimni qaytaradi:

	a := make([]int, 5)  // len(a)=5

Hajmini ko'rsatish uchun `make` ning uchinchi argumentini ham ishlatish kerak:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go

* Nil qirqimlar

Qirqimlarning nol qiymati `nil`.

nil qiymatli qirqimning uzunligi ham hajmi ham 0 ga teng.

.play moretypes/nil-slices.go

* Qirqimlarga element qo'shish

Qirqimga element qo'shish uchun umumiy hisoblangan `append` funksiyasi qo'llaniladi.
[[http://golang.org/pkg/builtin/#append][Qo'llanma]]
ichki qurilgan `append` funksiyasini sharhlab beradi.

	func append(s []T, vs ...T) []T

`append` dagi `s` birinchi parametr bu `T` turidagi qirqim, qolganllari esa qirqimga qo'shiladigan `T` turdagi qiymatlar.

`append` funksiyasining natijasi bu qirqimning qiymatlari va plyus unga qo'shilayotgan barcha qiymatlar qo'shilgan qirqim bo'ladi.

Agar orqa fondagi ajratilgan massiv qiymatlarni qo'llab quvvatlash uchun kamlik qilsa yana massiv ajratiladi. Qaytarilgan qirqim yangi taqsimlangan massivga murojaat qila boshlaydi.

(Qirqimlar haqida ko'proq ma'lumot olish uchun [[http://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]] maqolasini o'qing.)

.play moretypes/append.go

* Range (qator)

`for` takrorlanish operatorining `range` qator shakli xarita yoki qirqimlar uchun qo'llanilishi mumkin.

.play moretypes/range.go

* Range davomi

Siz indeks yoki qiymatni `_` ga biriktirib ularni tashlab ketishingiz mumkin.

Agar siz faqat indekslarni olishni xohlayotgan bo'lsangiz u holda ", value" ni o'chirib tashlang.

.play moretypes/range-continued.go

* Mashq: Qirqimlar

`Pic` ni ishchi holatga keltiring. U uzunligi `dy` ga teng bo'lgan va har bir elementi uzunligi `dx` qiymati esa 8-bitli ishorasiz int (uint8)li qirqimni qaytarishi kerak. Qachon siz dasturni ishga tushirsangiz, u sonlarni qo'llab sizni kulrangni shkalasini (ko'krangni) rasm tarzida namoyish etishi kerak.

Rasmni tanlash sizga bog'liq. Qiziqarli funksiyalar `(x+y)/2`, `x*y` va `x^y` larni o'z ichiga oladi.

(Siz har bir `[][]uint8` ichida `[]uint8` ni qo'llashni sikllashtirishingiz kerak.)

(`uint8(intValue)` ni turdan turga o'tkazishda foydalaning.)

.play moretypes/exercise-slices.go

* Xaritalar

Xarita bu qiymatlar uchun kalitlar xaritasi.

Xaritalar ishlatilishidan oldin `make`(`new` emas) yordamida yaratilishi kerak; `nil` xarita bo'mbo'sh va uni biriktirib bo'lmaydi.

.play moretypes/maps.go

* Literalli xaritalar

Literalli xaritalar literalli tuzilmalarga o'xshaydi, ammo bunda kalitlar talab etiladi.

.play moretypes/map-literals.go

* Literalli xaritalar davomi

Agar tur nomi yuqorida turlanishda keltirilgan bo'lsa u holda uni elementlar qiymatlarida ko'rsatish shart emas. Masalan misoldagi Vertex so'zi yuqorida e'lon qilinganligi bois quyida elementlar qiymatlarida ko'rsatilmagan.

.play moretypes/map-literals-continued.go

* Xaritalar ko'rinishini o'zgartirish

`m` xaritasiga element qo'yish yoki uni elementini o'zgartirish:

	m[key] = elem

Elementni olish:

	elem = m[key]

Elementni o'chirish:

	delete(m, key)

`key` indeksli xaritaning elementi borligini ikkita o'zgaruvchiga biriktirish bilan tekshirish:

	elem, ok = m[key]

Agar `key` `m` da bor bo'lsa `ok` rost ya'ni `true`. Agar yo'q bo'lsa `ok` yolg'on `false` va `elem` xaritaning elementining turiga tegishli bo'lgan nol qiymatni oladi.

Shu tarzda qachon xaritadan o'qisaku lekin biz so'ragan kalitli element yo'q bo'lsa natija xarita elementining turiga mos nol qiymat bo'ladi.

.play moretypes/mutating-maps.go

* Mashq: Xaritalar

`WordCount` ni ishchi holatga keltiring. U `s` satridagi har bir "so'zning" sonini qaytarishi kerak. `wc.Test` funksiya ishga tushib siz keltirgan funksiyani tekshirib uni muvaffaqiyatli bajarilganligini yoki bajarilmaganligini tekshiradi.

Siz [[http://golang.org/pkg/strings/#Fields][strings.Fields]] dan foydalanishingiz mumkin.

.play moretypes/exercise-maps.go

* Funksiya qiymatlari

Funksiyalar ham qiymat bo'la oladi.

.play moretypes/function-values.go

* Funksiya tutilmalari(closure)

Go funksiyalr tutilma bo'lishi mumkin. Tutilma bu funksiya qiymatining tashqi tanadagi o'zgaruvchi qiymati bilan bog'lanishidir. Funksiya o'zgaruvchilar murojaatiga qiymat biriktirish yoki undan foydalanish huquqiga ega bo'ladi. Bu funksiya o'zgaruvchilar "chegarasi"da degan ma'noni anglatadi.

Misol uchun `adder` funksiya tutilmani qaytaradi. Har bir tutilma bu `sum` o'zgaruvchisining o'z chegarasi bilan bog'liqdir.

.play moretypes/function-closures.go

* Mashq: Fibonachchi tutilmasi

Keling funksiyalar ustida "xazillashamiz".

`fibonacci` funksiyasini ishchi holatga keltiring. U fibonachchi sonlarini qaytaruvchi funksiyani (tutilma bu vaqtda funksiya tutilma bo'layabdi) qaytarishi  lozim.

.play moretypes/exercise-fibonacci-closure.go

* Tabriklaymiz!

Siz ushbu mashg`ulotni yakunladingiz!

Siz [[/list][modullar]] ro`yhatiga qaytishingiz va nimani o'rganishni xohlasangiz shuni tanlashingiz mumkin, yoki [[javascript:click('.next-page')][navbatdagi]]ni bosib keyingi mashg`ulotga o`tishingiz mumkin.